# import("test")

Test.describe("Number", as: { |test|
  test("+", is: { |assert|
    assert(1 + 2 == 3)
    assert(1.0 + 2.1 == 3.1)
    assert(0 + 0 == 0)
  })

  test("-", is: { |assert|
    assert(2 - 1 == 1)
    assert(1 - 2 == -1)
  })

  test("*", is: { |assert|
    assert(2 * 1 == 2)
    assert(2 * 2 == 4)
    assert(2 * -3 == -6)
  })

  test("/", is: { |assert|
    assert(2 / 1 == 2)
    assert(2 / 2 == 1)
    assert(5 / 10 == 0.5)
  })

  test(">", is: { |assert|
    assert(2 > 1)
    assert(5 > -3)
    assert(!(3 > 5))
  })

  test(">=", is: { |assert|
    assert(2 >= 1)
    assert(2 >= 2)
    assert(!(1 >= 2))
  })

  test("<", is: { |assert|
    assert(1 < 2)
    assert(3 < 5)
    assert(!(3 < -5))
  })

  test("<=", is: { |assert|
    assert(1 <= 2)
    assert(2 <= 2)
    assert(!(2 <= 1))
  })

  test("==", is: { |assert|
    assert(1 == 1)
    assert(-2 == -2)
    assert(!(1 == 2))
  })

  test("!=", is: { |assert|
    assert(1 != 2)
    assert(-2 != 3)
    assert(!(1 != 1))
  })

  test("operator precedence", is: { |assert|
    assert(1 + 2 * 3 == 7)
    assert(2 / 1 + 4 == 6)
    assert(1 * 2 + 3 - 4 / 2 == 3)
  })

  test("times", is: { |assert|
    count = 0

    retval = 10.times({
      count = count + 2
    })

    assert(count == 20)

    # Returns the number
    assert(retval == 10)
  })

  test("toString", is: { |assert|
    assert(1.toString() == "1")
    assert(1.5.toString() == "1.5")
    assert(-3.toString() == "-3")
  })
})
