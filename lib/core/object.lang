Object.addSlots(

  # Add a single slot to this object.
  addSlot: { |name, as|
    BuiltIn.objectAddSlot(object: self, name: name, as: as)
  },

  # Find a given slot in this object and instead of returning the value at that slot,
  # this returns a meta object on which information about the slot is stored.
  getSlot: { |name|
    BuiltIn.objectGetSlot(object: self, name: name)
  },

  # Get the list of the name of slots on this object and all parents.
  # If includeParents is false, will only return this object's immediate slots.
  slotNames: { |includeParents: true|
    BuiltIn.objectGetSlotNames(object: self, includeParents: includeParents)
  },

  # Get this object's unique internal id
  objectId: {
    BuiltIn.objectId(object: self)
  },

  # Does this object contain a slot with the given name?
  hasSlot: { |slotName|
    BuiltIn.objectHasSlot(object: self, slotName: slotName)
  },

  # All objects except False and Null are what we call "truthy".
  # When the `do` message is sent, objects will always execute the `ifTrue` block.
  do: { |ifTrue: {}, ifFalse: {}|
    ifTrue()
  },

  # Is this object of the expected type?
  # Which in this system means does this object have the expected object
  # in its parents tree?
  # Will also return true if the object is itself the expected value,
  # e.g.
  #
  #   Object.is(Object)   => true
  #   1.is(Number)        => true
  #   "String".is(Number) => false
  #
  is: { |expected|
    BuiltIn.objectIs(object: self, type: expected)
  },

  # The NOT operator negates the current value using truthiness rules.
  # As Objects are always Truthy, this returns false.
  "!": {
    false
  },

  # TODO: So due to how the system works, && and || do not
  # short-circuit by default, but instead evaluate the whole thing.
  # To make this short-circuit itself would require a special execution
  # path through the interpereter just for the && and || messages, which
  # I'm not a fan of doing. One option is to provide an `.and` and `.or` message
  # which explicitly takes blocks to evaluate which can lead to verbose code.
  # Alternatively, the path I'm taking for now is that if you wrap all following
  # clauses for && and || in a block, then these messages will only evaluate that
  # block if necessary.

  # The AND operator will return `other` if both this object and `other` are
  # truthy. Otherwise will return this object if it's falsey or `other` if it
  # is falsey
  "&&": { |other|
    self.do(
      ifTrue: {
        other.hasSlot("call").do(
          ifTrue: { other.call() },
          ifFalse: { other }
        )
      },
      ifFalse: { self }
    )
  },

  # The OR operator will return this object if it's truthy, otherwise it will
  # return the `other` object.
  "||": { |other|
    self.do(
      ifTrue: { self },
      ifFalse: {
        other.hasSlot("call").do(
          ifTrue: { other.call() },
          ifFalse: { other }
        )
      }
    )
  },

  # Object comparison. Objects are equal if their objectIds are equal.
  "==": { |other|
    self.objectId() == other.objectId()
  },

  "!=": { |other|
    !(self == other)
  },

  # Return a string that represents this object
  toString: {
    self.objectName
  },
)
