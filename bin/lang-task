#!/usr/bin/env lang-cli

# import("task_runner")
# import("test")

# Apologize for the weird name but have a small issue regarding loading
# files and scoping. This variable should just be `runner` but due to
# the scoping issues, this clashes with the TestRunner test suite.
#
# Right now all files are loaded into the stdlib space
# which means this variable is accessible to everyone else. It will take
# a few steps to fix this.
#
# 1) A packaging system that lets us explicitly export symbols to be applied
#    to the stdlib space.
# 2) Updating the task runner itself to load files in its own context.
#
theTaskRunner = TaskRunner.new()

theTaskRunner.define("test", is: { |pathGlob: []|
  theTaskRunner.runTask("test:load", args: pathGlob)
  theTaskRunner.runTask("test:run")
})

theTaskRunner.define("test:load", is: { |pathGlob: []|
  # Find all files that match _spec or _test inside of pathGlob
  # Load each file into the VM to build up our test suite
  # Instantiate the test runner
  # Run the tests
  # Report the result as success or failure (exit(0) / exit(1))

  pathGlob.isEmpty().do({
    pathGlob = ["{spec,test}/**/*_{spec,test}.lang"]
  })

  # Check what we've got now and see if there were any directories
  # passed in, updating those to include the globbing we want.
  cleanGlobs = pathGlob.map({ |entry|
    File.isDirectory(entry).do(
      ifTrue: { entry + "/**/*_{spec,test}.lang" },
      ifFalse: { entry }
    )
  })

  filesFound = File.search(cleanGlobs)

  filesFound.isEmpty().do({
    IO.puts("No files matching *_spec.lang or *_test.lang found in " + pathGlob)
    exit(1)
  })

  filesFound.each({ |file|
    load(file.path)
  })

  true
})

theTaskRunner.define("test:run", is: { |args|
  testRunner = Runner.new(
    suites: Test.suites,
    reporter: Reporter.new(),
  )

  testRunner.run()
})

theTaskRunner.define("bench", is: { |args|
  theTaskRunner.runTask("test:load", args: [])

  BuiltIn.debugger()
  start = Time.utc()

  100.times({
    theTaskRunner.runTask("test:run")
  })

  IO.puts("Benchmark took " + ((Time.utc() - start) / 100) + " seconds to run")

  true
})

result = theTaskRunner.run(Process.argv)

result.do(
  ifTrue: { exit(0) },
  ifFalse: { exit(1) }
)
