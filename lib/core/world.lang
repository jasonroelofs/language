World.setSlots(
  # Given a file path, evaluate the content of that file in the context
  # of this object. By default this will always load the content into the
  # top level World, but providing `into` lets the code specify a different
  # object in which to load this code.
  load: { |filePath, into: World|
    # We kind of cheat here.
    # The call into the built-in *must* be the last value in this block.
    # Technically this block will finish evaluating before the requested
    # file starts processing, but due to the nature of the interpreter,
    # the file's code will then start executing immediately after. Once
    # that code is done the next call will be the code that sent
    # this message.
    BuiltIn.load(filePath: filePath, into: into)
  },

  # Explicit halt the current process, setting the exist status to the
  # given number.
  #
  # A status of 0 is considered a successful, clean run
  # A status of any other number is considered a failure
  exit: { |status|
    BuiltIn.exit(status)
  },
)
