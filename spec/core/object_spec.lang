# import("test")

Test.describe("Object", as: { |test|
  test("new", is: { |assert|
    obj = Object.new(list: [], string: "", number: 1)

    assert(obj.list == [])
    assert(obj.string == "")
    assert(obj.number == 1)
  })

  test("new supports inheritance", is: { |assert|
    parent = Object.new(name: "parent", getName: { name })
    child = parent.new(name: "child")

    assert(parent.getName() == "parent")
    assert(child.getName() == "child")
  })

  test("new stores default values for children objects", is: { |assert|
    obj1 = Object.new(list1: [])
    obj1.list1.push(1)

    obj2 = obj1.new(list2: [])
    obj2.list2.push(2)

    obj3 = obj2.new(list3: [])
    obj3.list3.push(3)

    assert(obj1.list1 == [1])

    assert(obj2.list1 == [])
    assert(obj2.list2 == [2])

    assert(obj3.list1 == [])
    assert(obj3.list2 == [])
    assert(obj3.list3 == [3])
  })

  test("slotNames", is: { |assert|
    obj = Object.new(slot: "value")

    assert(obj.slotNames().length() > 1)
    assert(obj.slotNames(includeParents: false) == ["slot", "objectName"])
  })

  test("== and !=", is: { |assert|
    assert(true == true)
    assert(false == false)
    assert(true != false)
    assert(null == null)
    assert(null != false)
  })

  test("is", is: { |assert|
    assert(Object.is(Object))
    assert(Array.is(Array))
    assert(Array.is(Object))
    assert(Number.is(Object))

    assert(!Object.is(Number))
    assert(!Number.is(Array))

    a = [1, 2, 3]
    assert(a.is(a))
    assert(a.is(Array))

    assert(a[0].is(Number))
    assert(a[1].is(Number))
    assert(a[2].is(Number))

    b = "string"
    assert(b.is(b))
    assert(b.is(String))
  })

  test("&&", is: { |assert|
    assert(true && true)
    assert(!(true && false))
    assert(!(null && true))

    assert(!(false && false))

    assert(1 && 2)
    assert(!(1 && false))

    # && does not short-circuit by default
    a = 1
    assert((a = a + 1) && (a = a + 2))
    assert(a == 4, message: "Both sides, a is now " + a)

    # But provide a block and it will
    b = 1
    assert(!(false && { b = b + 2 }))
    assert(b == 1, message: "Short circuit 1, b ended up " + b)

    c = 1
    assert((c = c + 1) && { c = c + 2 })
    assert(c == 4, message: "Short circuit 2, c ended up " + c)
  })

  test("||", is: { |assert|
    assert(true || true)
    assert(true || false)
    assert(null || true)
    assert(true || null)

    assert(!(false || false))

    assert(1 || 2)
    assert(1 || false)

    # || does not short-circuit by default
    a = 1
    assert((a = a + 1) || (a = a + 2))
    assert(a == 4, message: "Both sides, a is now " + a)

    # But provide a block and it will
    b = 1
    assert(true || { b = b + 2 })
    assert(b == 1, message: "Short circuit 1, b ended up " + b)

    c = 1
    assert(false || { c = c + 2 })
    assert(c == 3, message: "Short circuit 2, c ended up " + c)
  })
})
