#
# Test Framework!
#

Test = Object.new(
  suites: []

  # All tests start with a `describe` block, which defines a test suite.
  # describe should be given a string `name` for the suite
  # and a block in `as` in which tests will be defined.
  describe: { |name, as|
    suite = Suite.new(name: name)
    as(suite.test)
    suites.push(suite)

    # TODO: The actual running of tests should happen in a different object
    # Need something here because we have nothing else at this time.
    runner = Runner.new(
      suites: Test.suites,
      reporter: Reporter.new(),
    )
    runner.run()
  },
)

Suite = Object.new(
  tests: [],

  # Define an individual test.
  # If no block is given, this test is marked as "pending".
  test: { |name, is: null|
    tests.push(Unit.new(suite: self, name: name, test: is))
  },
)

Unit = Object.new(
  name: null,
  test: null,
  suite: null,
)

Runner = Object.new(
  suites: [],

  reporter: null,

  assert: { |expr, message: null|
    expr.do(
      ifTrue: { reporter.success() },
      ifFalse: { reporter.failure(message) }
    )
  },

  run: {
    reporter.start(suite)

    suites.each({ |suite|
      suite.tests.each({ |test|
        test.test.do(
          ifTrue: { test.test(assert) },
          ifFalse: { reporter.pending(test) }
        )
      })
    })

    reporter.complete()
  },
)

Reporter = Object.new(
  assertions: 0,

  successes: 0,

  failures: 0,

  pendingTests: [],

  startTime: 0,

  start: { |suite|
    startTime = Time.utc()

    IO.puts("Running " + suite.name)
    IO.puts()
  },

  success: {
    assertions = assertions + 1
    successes = successes + 1

    IO.print(".")
  },

  failure: { |message: null|
    assertions = assertions + 1
    failures = failures + 1

    IO.print("F")
  },

  pending: { |test|
    pendingTests.push(test)
  },

  complete: {
    IO.puts()

    endTime = Time.utc()
    elapsedMs = endTime - startTime

    # Output pending tests
    IO.puts()
    IO.puts("Pending tests:")
    pendingTests.each({ |test|
      IO.puts()
      IO.puts("\t" + test.suite.name + " " + test.name)
    })

    results = "Finished in " + elapsedMs + "ms. "
    results = results + assertions + " assertions, "
    results = results + successes + " successes, "
    results = results + failures + " failures"

    (pendingTests.length() > 0).do(
      ifTrue: { results = results + ", " + pendingTests.length() + " pending" }
    )

    IO.puts()
    IO.puts(results)
    IO.puts()
  }
)
