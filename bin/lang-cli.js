import * as fs from "fs"

import WebSafeVM from "@vm/web_safe_vm"
import REPL from "@vm/repl"
import { SyntaxError } from "@compiler/errors"
import { ErrorReport } from "@vm/error_report"

let [_self, _cli, toRun, ...rest] = process.argv

if(toRun) {
  try {
    fs.accessSync(toRun, fs.constants.R_OK)
  } catch(e) {
    console.error("Cannot find or read file at '%s'", toRun)
    process.exit(1)
  }
}

let vm = new WebSafeVM()

vm.ready(rest).then(async () => {
  try {
    if(toRun) {
      await vm.loadFile(toRun)
    } else {
      let repl = new REPL(vm)
      repl.run()
    }
  } catch(error) {
    let report = null

    // If we've got an error generated by the language or the runtime,
    // we can run our reporting through it and give nice output.
    // If it's an unexpected error, say via a node library or otherwise a mistake,
    // throw it all the way.
    if(error.data) {
      report = new ErrorReport(error.data, vm.loadedFiles)
    } else if (error instanceof SyntaxError) {
      report = new ErrorReport(error, vm.loadedFiles)
    } else {
      throw(error)
    }

    if(report) {
      console.log(report.buildReport())
    }
  }
})
